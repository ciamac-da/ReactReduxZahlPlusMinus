{"version":3,"sources":["image/Mathe.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","display","justifyContent","marginTop","spacing","card","maxWidth","media","height","width","content","flexDirection","alignItems","App","classes","useState","zahl","zahlSetzen","style","animation","className","Card","CardActionArea","CardMedia","image","Mathe","title","CardContent","TableRow","TableCell","Button","onClick","e","variant","color","fontSize","align","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,mC,wQCcrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACPC,QAAQ,OACRC,eAAe,SACfC,UAAUJ,EAAMK,QAAQ,IAEvBC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,IACRC,MAAM,KAERC,QAAQ,CACNT,QAAS,OACTC,eAAe,SACfS,cAAc,SACdC,WAAW,cAoCAC,MAjCf,WACE,IAAMC,EAAUjB,IADH,EAEakB,mBAAS,GAFtB,mBAENC,EAFM,KAEDC,EAFC,KAMb,OACF,yBAAKC,MAAO,CAACC,UAAU,QAAD,OAAS,GAAGH,EAAZ,eAA+BI,UAAWN,EAAQd,MACtE,kBAACqB,EAAA,EAAD,CAAMD,UAAWN,EAAQT,MACrB,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEH,UAAWN,EAAQP,MACnBiB,MAAOC,IACPC,MAAM,gBAGR,kBAACC,EAAA,EAAD,CAAaP,UAAWN,EAAQJ,SAClC,kBAACkB,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACJ,kBAACC,EAAA,EAAD,CAAQC,QAhBU,SAAAC,GAAC,OAAIf,EAAWD,EAAK,IAgBViB,QAAQ,YAAYC,MAAM,UAAUhB,MAAO,CAACiB,SAAS,SAAU,kBAAC,IAAD,OAC5F,kBAACL,EAAA,EAAD,CAAQC,QAhBW,SAAAC,GAAC,OAAIf,EAAWD,EAAK,IAgBViB,QAAQ,YAAYC,MAAM,YAAYhB,MAAO,CAACiB,SAAS,SAAS,kBAAC,IAAD,SAGzF,kBAACP,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAWO,MAAM,UACd,kBAACN,EAAA,EAAD,CAAQG,QAAQ,aAAajB,SC/CnBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.95a215c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Mathe.91a8270b.jpg\";","import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport PlusOneIcon from '@material-ui/icons/PlusOne';\nimport ExposureNeg1Icon from '@material-ui/icons/ExposureNeg1';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Mathe from \"./image/Mathe.jpg\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n display:\"flex\",\n justifyContent:\"center\",\n marginTop:theme.spacing(5)\n    },\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n    width:340,\n  },\n  content:{\n    display: \"flex\",\n    justifyContent:\"center\",\n    flexDirection:\"column\",\n    alignItems:\"center\"\n  }\n}));\nfunction App() {\n  const classes = useStyles();\n  const [zahl,zahlSetzen] = useState(0);\n  const clickPlus = e => zahlSetzen(zahl+1)\n  const clickMinus = e => zahlSetzen(zahl-1) \n  \n  return (\n<div style={{animation:`roto ${10-zahl}s infinite`}} className={classes.root}>\n  <Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={Mathe}\n          title=\"Mathematik\"\n        />\n      </CardActionArea>\n        <CardContent className={classes.content}>\n      <TableRow>\n      <TableCell>\n  <Button onClick= {clickPlus} variant=\"contained\" color=\"primary\" style={{fontSize:\"20px\"}} ><PlusOneIcon/></Button>\n  <Button onClick= {clickMinus} variant=\"contained\" color=\"secondary\" style={{fontSize:\"20px\"}}><ExposureNeg1Icon/></Button>\n      </TableCell>\n      </TableRow>\n       <TableRow>\n       <TableCell align=\"center\">\n          <Button variant=\"contained\">{zahl}</Button>\n       </TableCell>\n       </TableRow>\n        </CardContent>\n    </Card>\n</div>\n    )};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}